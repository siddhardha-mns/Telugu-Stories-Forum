import streamlit as st
from datetime import datetime
from typing import List, Dict, Any


class TeluguStoriesApp:
    """Main application class for Telugu Stories platform."""
    
    # Class constants
    CATEGORIES = ["‡∞ï‡∞•", "‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞", "‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø", "‡∞ï‡∞µ‡∞ø‡∞§", "‡∞µ‡∞ø‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞Ç"]
    EXCERPT_LENGTH = 150
    
    def __init__(self):
        """Initialize the application."""
        self._configure_page()
        self._load_custom_styles()
        self._initialize_session_state()
    
    def _configure_page(self) -> None:
        """Configure Streamlit page settings."""
        st.set_page_config(
            page_title="‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞ï‡∞•‡∞≤‡±Å",
            page_icon="üìñ",
            layout="centered",
            initial_sidebar_state="auto",
        )
    
    def _load_custom_styles(self) -> None:
        """Load custom CSS styles."""
        css = """
        <style>
            /* Import Google Fonts for Telugu and UI elements */
            @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Telugu:wght@400;700&family=Poppins:wght@400;500;700&display=swap');
            
            /* CSS Variables for consistent theming */
            :root {
                --primary-color: #E67E22;
                --secondary-color: #34495E;
                --background-color: #F8F9FA;
                --text-color: #2C3E50;
                --meta-text-color: #7F8C8D;
                --card-shadow: 0 4px 15px rgba(0,0,0,0.07);
                --border-radius: 10px;
                --transition: all 0.3s ease;
            }

            /* Base Typography */
            html, body, [class*="st-"] {
                font-family: 'Noto Sans Telugu', sans-serif;
                color: var(--text-color);
            }
            
            /* Header Styles */
            h1 {
                font-family: 'Noto Sans Telugu', sans-serif;
                font-weight: 700;
                color: var(--secondary-color) !important;
                margin-bottom: 0.5rem;
            }

            h2, h3 {
                font-family: 'Poppins', sans-serif;
                font-weight: 700;
                color: var(--secondary-color) !important;
            }

            /* Enhanced Button Styles */
            .stButton > button {
                border: 2px solid var(--primary-color);
                color: var(--primary-color);
                border-radius: 20px;
                transition: var(--transition);
                font-weight: 600;
                padding: 0.5rem 1rem;
            }
            
            .stButton > button:hover {
                background-color: var(--primary-color);
                color: white;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(230, 126, 34, 0.3);
            }
            
            /* Story Card Styles */
            .story-card {
                background: linear-gradient(145deg, #ffffff, #f8f9fa);
                border-radius: var(--border-radius);
                padding: 1.5rem;
                margin-bottom: 1.5rem;
                box-shadow: var(--card-shadow);
                border-left: 4px solid var(--primary-color);
                transition: var(--transition);
                position: relative;
                overflow: hidden;
            }
            
            .story-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 2px;
                background: linear-gradient(90deg, var(--primary-color), transparent);
            }
            
            .story-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.12);
            }

            /* Category Badge */
            .story-category {
                background: linear-gradient(45deg, var(--primary-color), #f39c12);
                color: white;
                padding: 0.3rem 0.8rem;
                border-radius: 20px;
                font-size: 0.75rem;
                font-weight: 600;
                display: inline-block;
                margin-bottom: 0.8rem;
                font-family: 'Poppins', sans-serif;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            
            /* Story Content Styles */
            .story-title {
                font-size: 1.3rem;
                font-weight: 700;
                color: var(--secondary-color);
                margin-bottom: 0.5rem;
                line-height: 1.4;
            }
            
            .story-meta {
                color: var(--meta-text-color);
                font-size: 0.85rem;
                margin-bottom: 1rem;
                font-family: 'Poppins', sans-serif;
            }
            
            .story-excerpt {
                line-height: 1.6;
                color: var(--text-color);
                margin-bottom: 1rem;
            }
            
            /* Action Buttons */
            .story-actions {
                display: flex;
                gap: 0.5rem;
                flex-wrap: wrap;
            }
            
            .story-actions button {
                font-size: 0.8rem !important;
                padding: 0.3rem 0.6rem !important;
                border-radius: 15px !important;
            }
            
            /* Sidebar Enhancements */
            .sidebar-section {
                background: white;
                border-radius: var(--border-radius);
                padding: 1rem;
                margin-bottom: 1rem;
                box-shadow: var(--card-shadow);
            }
            
            /* Footer */
            .footer {
                text-align: center;
                color: var(--meta-text-color);
                font-size: 0.85rem;
                margin-top: 2rem;
                padding-top: 1rem;
                border-top: 1px solid #e0e0e0;
            }
            
            /* Form Enhancements */
            .stTextInput > div > div > input,
            .stTextArea > div > div > textarea,
            .stSelectbox > div > div > select {
                border-radius: 8px;
                border-color: #ddd;
                font-family: 'Noto Sans Telugu', sans-serif;
            }
            
            /* Dialog Enhancements */
            .stDialog {
                border-radius: var(--border-radius);
            }
        </style>
        """
        st.markdown(css, unsafe_allow_html=True)
    
    def _initialize_session_state(self) -> None:
        """Initialize session state with default data."""
        if 'stories' not in st.session_state:
            st.session_state.stories = self._get_default_stories()
        
        if 'show_form' not in st.session_state:
            st.session_state.show_form = False
    
    def _get_default_stories(self) -> List[Dict[str, Any]]:
        """Return default stories data."""
        return [
            {
                "title": "‡∞™‡∞≤‡±ç‡∞≤‡±Ü‡∞ü‡±Ç‡∞∞‡∞ø ‡∞™‡±ç‡∞∞‡∞Ø‡∞æ‡∞£‡∞Ç",
                "author": "‡∞∞‡∞µ‡∞ø ‡∞ï‡±Å‡∞Æ‡∞æ‡∞∞‡±ç",
                "timestamp": "5 ‡∞ó‡∞Ç‡∞ü‡∞≤ ‡∞ï‡±ç‡∞∞‡∞ø‡∞§‡∞Ç",
                "category": "‡∞ï‡∞•",
                "excerpt": "‡∞í‡∞ï‡∞æ‡∞®‡±ä‡∞ï ‡∞™‡∞≤‡±ç‡∞≤‡±Ü‡∞ü‡±Ç‡∞∞‡∞ø‡∞≤‡±ã ‡∞∞‡∞æ‡∞Æ‡±Å ‡∞Ö‡∞®‡±á ‡∞í‡∞ï ‡∞Ø‡±Å‡∞µ‡∞ï‡±Å‡∞°‡±Å ‡∞â‡∞Ç‡∞°‡±á‡∞µ‡∞æ‡∞°‡±Å. ‡∞Ö‡∞§‡∞®‡±Å ‡∞§‡∞® ‡∞ä‡∞∞‡∞ø‡∞®‡∞ø ‡∞µ‡∞ø‡∞°‡∞ø‡∞ö‡∞ø ‡∞™‡∞ü‡±ç‡∞ü‡∞£‡∞Ç ‡∞µ‡±Ü‡∞≥‡±ç‡∞≤‡∞æ‡∞≤‡∞®‡∞ø ‡∞ï‡∞≤‡∞≤‡±Å ‡∞ï‡∞®‡±á‡∞µ‡∞æ‡∞°‡±Å. ‡∞Ö‡∞§‡∞®‡∞ø ‡∞ï‡∞≤‡∞≤‡±Å, ‡∞ï‡∞∑‡±ç‡∞ü‡∞æ‡∞≤‡±Å, ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞æ‡∞≤ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞à ‡∞ï‡∞•...",
                "upvotes": 125,
                "comments": 32,
                "created_at": datetime.now().isoformat()
            },
            {
                "title": "‡∞ï‡∞æ‡∞ï‡∞§‡±Ä‡∞Ø‡±Å‡∞≤ ‡∞µ‡±à‡∞≠‡∞µ‡∞Ç",
                "author": "‡∞∏‡±Å‡∞Æ‡∞≤‡∞§",
                "timestamp": "2 ‡∞∞‡±ã‡∞ú‡±Å‡∞≤ ‡∞ï‡±ç‡∞∞‡∞ø‡∞§‡∞Ç",
                "category": "‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞",
                "excerpt": "‡∞ï‡∞æ‡∞ï‡∞§‡±Ä‡∞Ø ‡∞∏‡∞æ‡∞Æ‡±ç‡∞∞‡∞æ‡∞ú‡±ç‡∞Ø‡∞Ç ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞®‡±á‡∞≤ ‡∞∏‡±ç‡∞µ‡∞∞‡±ç‡∞£‡∞Ø‡±Å‡∞ó‡∞æ‡∞≤‡∞≤‡±ã ‡∞í‡∞ï‡∞ü‡∞ø. ‡∞µ‡∞æ‡∞∞‡∞ø ‡∞™‡∞∞‡∞ø‡∞™‡∞æ‡∞≤‡∞®, ‡∞ï‡∞≥‡∞≤‡±Å, ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∂‡∞ø‡∞≤‡±ç‡∞™‡∞ï‡∞≥ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞§‡±Ü‡∞≤‡±Å‡∞∏‡±Å‡∞ï‡±Å‡∞Ç‡∞¶‡∞æ‡∞Ç. ‡∞∞‡±Å‡∞¶‡±ç‡∞∞‡∞Æ ‡∞¶‡±á‡∞µ‡∞ø, ‡∞ï‡∞æ‡∞ï‡∞§‡±Ä‡∞Ø ‡∞ï‡∞≥‡∞æ‡∞§‡±ç‡∞Æ‡∞ï ‡∞µ‡±à‡∞≠‡∞µ‡∞Ç...",
                "upvotes": 250,
                "comments": 78,
                "created_at": datetime.now().isoformat()
            }
        ]
    
    def _validate_story_data(self, title: str, author: str, content: str) -> tuple[bool, str]:
        """Validate story form data."""
        if not title.strip():
            return False, "‡∞∂‡±Ä‡∞∞‡±ç‡∞∑‡∞ø‡∞ï ‡∞§‡∞™‡±ç‡∞™‡∞®‡∞ø‡∞∏‡∞∞‡∞ø"
        if not author.strip():
            return False, "‡∞∞‡∞ö‡∞Ø‡∞ø‡∞§ ‡∞™‡±á‡∞∞‡±Å ‡∞§‡∞™‡±ç‡∞™‡∞®‡∞ø‡∞∏‡∞∞‡∞ø"
        if not content.strip():
            return False, "‡∞ï‡∞•/‡∞∞‡∞ö‡∞® ‡∞§‡∞™‡±ç‡∞™‡∞®‡∞ø‡∞∏‡∞∞‡∞ø"
        if len(title.strip()) < 3:
            return False, "‡∞∂‡±Ä‡∞∞‡±ç‡∞∑‡∞ø‡∞ï ‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç 3 ‡∞Ö‡∞ï‡±ç‡∞∑‡∞∞‡∞æ‡∞≤‡±Å ‡∞â‡∞Ç‡∞°‡∞æ‡∞≤‡∞ø"
        if len(content.strip()) < 50:
            return False, "‡∞ï‡∞•/‡∞∞‡∞ö‡∞® ‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç 50 ‡∞Ö‡∞ï‡±ç‡∞∑‡∞∞‡∞æ‡∞≤‡±Å ‡∞â‡∞Ç‡∞°‡∞æ‡∞≤‡∞ø"
        return True, ""
    
    def _create_story_excerpt(self, content: str) -> str:
        """Create excerpt from story content."""
        if len(content) <= self.EXCERPT_LENGTH:
            return content
        return content[:self.EXCERPT_LENGTH].rsplit(' ', 1)[0] + "..."
    
    def _add_new_story(self, title: str, author: str, category: str, content: str) -> None:
        """Add a new story to the session state."""
        new_story = {
            "title": title.strip(),
            "author": author.strip(),
            "timestamp": "‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±á",
            "category": category,
            "excerpt": self._create_story_excerpt(content.strip()),
            "upvotes": 0,
            "comments": 0,
            "created_at": datetime.now().isoformat()
        }
        st.session_state.stories.insert(0, new_story)
    
    def _render_story_card(self, story: Dict[str, Any], index: int) -> None:
        """Render a single story card."""
        # Story card container
        st.markdown('<div class="story-card">', unsafe_allow_html=True)
        
        # Category badge
        st.markdown(
            f'<div class="story-category">{story["category"]}</div>',
            unsafe_allow_html=True
        )
        
        # Story title
        st.markdown(
            f'<div class="story-title">{story["title"]}</div>',
            unsafe_allow_html=True
        )
        
        # Story metadata
        st.markdown(
            f'<div class="story-meta">‡∞∞‡∞ö‡∞Ø‡∞ø‡∞§: {story["author"]} ‚Ä¢ {story["timestamp"]}</div>',
            unsafe_allow_html=True
        )
        
        # Story excerpt
        st.markdown(
            f'<div class="story-excerpt">{story["excerpt"]}</div>',
            unsafe_allow_html=True
        )
        
        # Action buttons
        action_cols = st.columns([1, 1, 2, 2])
        with action_cols[0]:
            if st.button(f"üëç {story['upvotes']}", key=f"up_{index}"):
                st.session_state.stories[index]['upvotes'] += 1
                st.rerun()
        
        with action_cols[1]:
            if st.button("üëé", key=f"down_{index}"):
                if st.session_state.stories[index]['upvotes'] > 0:
                    st.session_state.stories[index]['upvotes'] -= 1
                    st.rerun()
        
        with action_cols[2]:
            st.button(f"üí¨ {story['comments']} ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ñ‡±ç‡∞Ø‡∞≤‡±Å", key=f"comm_{index}")
        
        with action_cols[3]:
            st.button("üì§ ‡∞≠‡∞æ‡∞ó‡∞∏‡±ç‡∞µ‡∞æ‡∞Æ‡±ç‡∞Ø‡∞Ç", key=f"share_{index}")
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    def _render_header(self) -> None:
        """Render the application header."""
        st.title("üìñ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞ï‡∞•‡∞≤‡±Å")
        st.markdown("**‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø, ‡∞ö‡∞¶‡∞µ‡∞Ç‡∞°‡∞ø, ‡∞ö‡∞∞‡±ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø** - ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø ‡∞µ‡±á‡∞¶‡∞ø‡∞ï")
        st.markdown("---")
    
    def _render_story_form(self) -> None:
        """Render the story submission form."""
        if st.button("‚úçÔ∏è ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞ï‡∞•‡∞®‡±Å ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", type="primary"):
            st.session_state.show_form = True
        
        if st.session_state.show_form:
            @st.dialog("‡∞Æ‡±Ä ‡∞ï‡∞•‡∞®‡±Å ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")
            def show_story_form():
                st.markdown("**‡∞Æ‡±Ä ‡∞∞‡∞ö‡∞®‡∞®‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø ‡∞™‡±ç‡∞∞‡±á‡∞Æ‡∞ø‡∞ï‡±Å‡∞≤‡∞§‡±ã ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø**")
                
                with st.form("story_form", clear_on_submit=True):
                    title = st.text_input(
                        "‡∞∂‡±Ä‡∞∞‡±ç‡∞∑‡∞ø‡∞ï *",
                        placeholder="‡∞Æ‡±Ä ‡∞ï‡∞•‡∞ï‡±Å ‡∞Ü‡∞ï‡∞∞‡±ç‡∞∑‡∞£‡±Ä‡∞Ø‡∞Æ‡±à‡∞® ‡∞∂‡±Ä‡∞∞‡±ç‡∞∑‡∞ø‡∞ï",
                        help="‡∞ï‡∞•‡∞®‡±Å ‡∞¨‡∞æ‡∞ó‡∞æ ‡∞µ‡∞ø‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡±á ‡∞∂‡±Ä‡∞∞‡±ç‡∞∑‡∞ø‡∞ï ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø"
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        category = st.selectbox("‡∞µ‡∞ø‡∞≠‡∞æ‡∞ó‡∞Ç *", self.CATEGORIES, index=0)
                    with col2:
                        author = st.text_input("‡∞∞‡∞ö‡∞Ø‡∞ø‡∞§ ‡∞™‡±á‡∞∞‡±Å *", placeholder="‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å")
                    
                    content = st.text_area(
                        "‡∞Æ‡±Ä ‡∞ï‡∞• / ‡∞∞‡∞ö‡∞® *",
                        height=300,
                        placeholder="‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞Æ‡±Ä ‡∞∞‡∞ö‡∞®‡∞®‡±Å ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...\n\n‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£:\n‡∞í‡∞ï‡∞æ‡∞®‡±ä‡∞ï ‡∞ï‡∞æ‡∞≤‡∞Ç‡∞≤‡±ã... ‡∞Æ‡±Ä ‡∞ï‡∞• ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
                        help="‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç 50 ‡∞Ö‡∞ï‡±ç‡∞∑‡∞∞‡∞æ‡∞≤‡±Å ‡∞∞‡∞æ‡∞Ø‡∞Ç‡∞°‡∞ø"
                    )
                    
                    submit_col1, submit_col2 = st.columns(2)
                    with submit_col1:
                        submitted = st.form_submit_button("üì§ ‡∞™‡±ç‡∞∞‡∞ö‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø", type="primary")
                    with submit_col2:
                        cancelled = st.form_submit_button("‚ùå ‡∞∞‡∞¶‡±ç‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")
                    
                    if cancelled:
                        st.session_state.show_form = False
                        st.rerun()
                    
                    if submitted:
                        is_valid, error_msg = self._validate_story_data(title, author, content)
                        
                        if not is_valid:
                            st.error(f"‚ùå {error_msg}")
                        else:
                            self._add_new_story(title, author, category, content)
                            st.session_state.show_form = False
                            st.success("üéâ ‡∞Æ‡±Ä ‡∞ï‡∞• ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞™‡±ç‡∞∞‡∞ö‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!")
                            st.balloons()
                            st.rerun()
            
            show_story_form()
    
    def _render_sidebar(self) -> None:
        """Render the application sidebar."""
        st.header("üìö ‡∞µ‡∞ø‡∞≠‡∞æ‡∞ó‡∞æ‡∞≤‡±Å")
        
        # Categories navigation
        for category in self.CATEGORIES:
            icon_map = {
                "‡∞ï‡∞•": "üìñ",
                "‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞": "üìú", 
                "‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø": "üé≠",
                "‡∞ï‡∞µ‡∞ø‡∞§": "üå∏",
                "‡∞µ‡∞ø‡∞ú‡±ç‡∞û‡∞æ‡∞®‡∞Ç": "üß†"
            }
            icon = icon_map.get(category, "üìÑ")
            st.page_link("app.py", label=f"{icon} {category}", icon=icon)
        
        st.markdown("---")
        
        # Statistics
        st.header("üìä ‡∞ó‡∞£‡∞æ‡∞Ç‡∞ï‡∞æ‡∞≤‡±Å")
        total_stories = len(st.session_state.stories)
        total_upvotes = sum(story['upvotes'] for story in st.session_state.stories)
        st.metric("‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞ï‡∞•‡∞≤‡±Å", total_stories)
        st.metric("‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞á‡∞∑‡±ç‡∞ü‡∞æ‡∞≤‡±Å", total_upvotes)
        
        st.markdown("---")
        
        # Guidelines
        st.info(
            """
            **üìã ‡∞µ‡±á‡∞¶‡∞ø‡∞ï ‡∞®‡∞ø‡∞Ø‡∞Æ‡∞æ‡∞≤‡±Å:**
            
            ‚Ä¢ ‡∞í‡∞ï‡∞∞‡∞ø‡∞®‡±ä‡∞ï‡∞∞‡±Å ‡∞ó‡±å‡∞∞‡∞µ‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø
            ‚Ä¢ ‡∞Ö‡∞∏‡∞≠‡±ç‡∞Ø ‡∞≠‡∞æ‡∞∑ ‡∞µ‡∞æ‡∞°‡∞ï‡∞Ç‡∞°‡∞ø  
            ‚Ä¢ ‡∞á‡∞§‡∞∞‡±Å‡∞≤ ‡∞∞‡∞ö‡∞®‡∞≤‡∞®‡±Å ‡∞¶‡±ä‡∞Ç‡∞ó‡∞ø‡∞≤‡∞ø‡∞Ç‡∞ö‡∞ï‡∞Ç‡∞°‡∞ø
            ‚Ä¢ ‡∞®‡∞æ‡∞£‡±ç‡∞Ø‡∞Æ‡±à‡∞® ‡∞ï‡∞Ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø
            
            *‡∞á‡∞¶‡∞ø ‡∞Æ‡∞® ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≠‡∞æ‡∞∑‡∞æ ‡∞∏‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡±Å‡∞≤ ‡∞µ‡±á‡∞¶‡∞ø‡∞ï* üôè
            """,
            icon="‚öñÔ∏è"
        )
    
    def _render_main_feed(self) -> None:
        """Render the main stories feed."""
        st.header("üî• ‡∞§‡∞æ‡∞ú‡∞æ ‡∞ï‡∞•‡∞≤‡±Å")
        
        if not st.session_state.stories:
            st.info("üìù ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞ï‡∞•‡∞≤‡±Å ‡∞è‡∞Æ‡±Ä ‡∞≤‡±á‡∞µ‡±Å. ‡∞Æ‡±Ä‡∞∞‡±á ‡∞Æ‡±ä‡∞¶‡∞ü‡∞ø ‡∞ï‡∞•‡∞®‡±Å ‡∞ú‡±ã‡∞°‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø!", icon="üí°")
            return
        
        # Filter options
        filter_col1, filter_col2 = st.columns(2)
        with filter_col1:
            selected_category = st.selectbox(
                "‡∞µ‡∞ø‡∞≠‡∞æ‡∞ó‡∞Ç ‡∞´‡∞ø‡∞≤‡±ç‡∞ü‡∞∞‡±ç",
                ["‡∞Ö‡∞®‡±ç‡∞®‡±Ä"] + self.CATEGORIES,
                key="category_filter"
            )
        
        with filter_col2:
            sort_option = st.selectbox(
                "‡∞ï‡±ç‡∞∞‡∞Æ‡∞¨‡∞¶‡±ç‡∞ß‡±Ä‡∞ï‡∞∞‡∞£",
                ["‡∞§‡∞æ‡∞ú‡∞æ‡∞µ‡∞ø", "‡∞Ö‡∞§‡±ç‡∞Ø‡∞ß‡∞ø‡∞ï ‡∞á‡∞∑‡±ç‡∞ü‡∞æ‡∞≤‡±Å", "‡∞Ö‡∞§‡±ç‡∞Ø‡∞ß‡∞ø‡∞ï ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ñ‡±ç‡∞Ø‡∞≤‡±Å"],
                key="sort_option"
            )
        
        # Filter and sort stories
        filtered_stories = st.session_state.stories
        if selected_category != "‡∞Ö‡∞®‡±ç‡∞®‡±Ä":
            filtered_stories = [s for s in filtered_stories if s['category'] == selected_category]
        
        # Sort stories
        if sort_option == "‡∞Ö‡∞§‡±ç‡∞Ø‡∞ß‡∞ø‡∞ï ‡∞á‡∞∑‡±ç‡∞ü‡∞æ‡∞≤‡±Å":
            filtered_stories = sorted(filtered_stories, key=lambda x: x['upvotes'], reverse=True)
        elif sort_option == "‡∞Ö‡∞§‡±ç‡∞Ø‡∞ß‡∞ø‡∞ï ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ñ‡±ç‡∞Ø‡∞≤‡±Å":
            filtered_stories = sorted(filtered_stories, key=lambda x: x['comments'], reverse=True)
        
        # Display stories
        for i, story in enumerate(filtered_stories):
            self._render_story_card(story, i)
        
        if not filtered_stories:
            st.info(f"'{selected_category}' ‡∞µ‡∞ø‡∞≠‡∞æ‡∞ó‡∞Ç‡∞≤‡±ã ‡∞ï‡∞•‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å.", icon="üîç")
    
    def _render_footer(self) -> None:
        """Render the application footer."""
        st.markdown("---")
        st.markdown(
            """
            <div class="footer">
                ¬© 2025 ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞ï‡∞•‡∞≤‡±Å ‚Ä¢ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞∏‡∞æ‡∞π‡∞ø‡∞§‡±ç‡∞Ø ‡∞µ‡±á‡∞¶‡∞ø‡∞ï ‚Ä¢ 
                <a href="#" style="color: var(--primary-color);">‡∞ó‡±ã‡∞™‡±ç‡∞Ø‡∞§‡∞æ ‡∞µ‡∞ø‡∞ß‡∞æ‡∞®‡∞Ç</a> ‚Ä¢ 
                <a href="#" style="color: var(--primary-color);">‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±Å</a>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    def run(self) -> None:
        """Run the main application."""
        # Header
        self._render_header()
        
        # Story submission form
        self._render_story_form()
        
        # Main layout
        main_col, sidebar_col = st.columns([3, 1.2])
        
        with main_col:
            self._render_main_feed()
        
        with sidebar_col:
            self._render_sidebar()
        
        # Footer
        self._render_footer()


# Application entry point
def main():
    """Main function to run the Telugu Stories application."""
    app = TeluguStoriesApp()
    app.run()


if __name__ == "__main__":
    main()
